import React, { useEffect, useState } from "react";
import axios from "axios";
import "./Trash.css";

const TrashPage = () => {
  const [deletedFiles, setDeletedFiles] = useState([]);
  const [loading, setLoading] = useState(true);
  const [previewFile, setPreviewFile] = useState(null);
  const [alertMessage, setAlertMessage] = useState(null);
  const [confirmDeleteId, setConfirmDeleteId] = useState(null);
  const [successMessage, setSuccessMessage] = useState(null);
  const [currentTime, setCurrentTime] = useState(new Date());

  const userId = localStorage.getItem("userData")
    ? JSON.parse(localStorage.getItem("userData")).id
    : null;

  const fetchTrash = async () => {
    try {
      const res = await axios.get(
        `http://localhost:3000/api/files/trash?userId=${userId}`
      );
      setDeletedFiles(res.data);
    } catch (err) {
      setAlertMessage("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡πÑ‡∏î‡πâ");
      console.error("Error fetching trash files:", err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchTrash();
  }, [userId]);
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);
  
    return () => clearInterval(timer);
  }, []);
  const handlePreview = (fileUrl) => {
    if (!fileUrl) {
      setAlertMessage("‡πÑ‡∏°‡πà‡∏û‡∏ö URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö preview");
    } else if (fileUrl.endsWith(".xlsx")) {
      setAlertMessage("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ");
    } else {
      setPreviewFile(fileUrl);
    }
  };

  const closePreview = () => setPreviewFile(null);
  const closeAlert = () => setAlertMessage(null);
  const closeSuccess = () => setSuccessMessage(null);

  const handleRestore = async (id) => {
    try {
      await axios.put(`http://localhost:3000/api/files/restore/${id}`);
      setDeletedFiles((prev) => prev.filter((doc) => doc.id !== id));
      setSuccessMessage("‚úÖ ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
      setTimeout(() => setSuccessMessage(null), 3000);
    } catch (err) {
      setAlertMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏ü‡∏•‡πå");
      console.error("Error restoring file:", err);
    }
  };

  const requestConfirmDelete = (id) => setConfirmDeleteId(id);
  const cancelDelete = () => setConfirmDeleteId(null);

  const confirmPermanentDelete = async () => {
    if (!confirmDeleteId) return;
    try {
      await axios.delete(
        `http://localhost:3000/api/files/permanent-delete/${confirmDeleteId}`
      );
      setDeletedFiles((prev) =>
        prev.filter((doc) => doc.id !== confirmDeleteId)
      );
      setSuccessMessage("üóëÔ∏è ‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      setTimeout(() => setSuccessMessage(null), 3000);
    } catch (err) {
      setAlertMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏≤‡∏ß‡∏£");
      console.error("Error permanently deleting file:", err);
    } finally {
      setConfirmDeleteId(null);
    }
  };

  return (
    <div className="trashpage-container">
      <h1 className="trashpage-title">‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</h1>
      {loading ? (
        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
      ) : deletedFiles.length === 0 ? (
        <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞</p>
      ) : (
        <table className="trashpage-table">
          <thead>
            <tr>
              <th>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</th>
              <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
              <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á</th>
              <th>‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô</th>
              <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏ö</th>
              <th>‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</th>
            </tr>
          </thead>
          <tbody>
            {deletedFiles.map((doc) => (
              <tr key={doc.id}>
                <td>
                  <a
                    href="#"
                    onClick={(e) => {
                      e.preventDefault();
                      handlePreview(doc.fileurl || doc.FileUrl || doc.url);
                    }}
                    className="trashpage-preview-link"
                  >
                    {doc.name}
                  </a>
                </td>
                <td>{doc.type}</td>
                <td>{doc.date}</td>
                <td>{doc.department}</td>
                <td>{new Date(doc.deleted_at).toLocaleString("th-TH")}</td>
                <td>
                  <button
                    className="trashpage-btn-restore"
                    onClick={() => handleRestore(doc.id)}
                  >
                    ‚ôªÔ∏è ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô
                  </button>
                  <button
                    className="trashpage-btn-delete"
                    onClick={() => requestConfirmDelete(doc.id)}
                  >
                    üóëÔ∏è ‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}

      {previewFile && (
        <div className="trashpage-preview-modal" onClick={closePreview}>
          <div
            className="trashpage-modal-content"
            onClick={(e) => e.stopPropagation()}
          >
            <button onClick={closePreview} className="trashpage-close-button">
              ‡∏õ‡∏¥‡∏î
            </button>
            <iframe
              src={previewFile}
              className="trashpage-preview-iframe"
              title="Preview Document"
            ></iframe>
          </div>
        </div>
      )}

      {alertMessage && (
        <div className="trash-popup-overlay" onClick={closeAlert}>
          <div className="trash-popup-box" onClick={(e) => e.stopPropagation()}>
            <p>{alertMessage}</p>
            <button className="trash-popup-close-btn" onClick={closeAlert}>
              ‡∏õ‡∏¥‡∏î
            </button>
          </div>
        </div>
      )}

      {successMessage && (
        <div className="trash-popup-success">
          <div className="trash-popup-success-box">
            <span>
              <i className="bi bi-check-circle-fill"></i>
            </span>
            <span>{successMessage}</span>
          </div>
        </div>
      )}

      {confirmDeleteId && (
        <div className="trash-popup-overlay" onClick={cancelDelete}>
          <div className="trash-popup-box" onClick={(e) => e.stopPropagation()}>
            <p>‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£?</p>
            <div className="trash-popup-actions">
              <button
                className="trashpage-btn-delete"
                onClick={confirmPermanentDelete}
              >
                ‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£
              </button>
              <button className="trashpage-btn-restore" onClick={cancelDelete}>
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default TrashPage;
